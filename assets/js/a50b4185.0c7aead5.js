"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[587],{6826:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>g,contentTitle:()=>m,default:()=>j,frontMatter:()=>p,metadata:()=>f,toc:()=>v});var r=n(4848),t=n(8453),o=n(6540),i=n(7058),h=n(9851),u=n(3692),d=n(9073),c=n(3317),a=n(6533);n(883);function l(e){let{direction:s}=e;const n=(0,o.useRef)(),{scaled:t}=(0,i.My)({direction:"x",domain:h.b8,range:[0,300]}),{scaled:c}=(0,i.My)({direction:"y",domain:h.iK,range:[300,0]}),[a,l]=(0,o.useState)(),x=e=>{if(e){const s=[];h.Ni.forEach(((n,r)=>{e.x1<=t(n.x)&&t(n.x)<=e.x2&&e.y1<=c(n.y)&&c(n.y)<=e.y2&&s.push(r)})),l(s)}else l(void 0)},{brush:p,setBrush:m}=(0,i.MX)(n,{onClick:()=>{l(void 0)},onChangeEnd:x,direction:s});return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(u.B,{children:[(0,r.jsx)(d.E,{fw:"bold",size:"xl",children:s}),(0,r.jsxs)(i.Pg,{ref:n,children:[(0,r.jsx)(h.fB,{xScale:t,yScale:c,selection:a}),p?(0,r.jsx)(i.Nm,{parent:n,brush:p,direction:s,onChange:m,onChangeEnd:x}):null]})]})})}function x(){return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(c.y,{children:(0,r.jsxs)(a.Y,{children:[(0,r.jsx)(l,{direction:"xy"}),(0,r.jsx)(l,{direction:"x"}),(0,r.jsx)(l,{direction:"y"})]})})})}const p={},m=void 0,f={id:"hooks/useBrush",title:"useBrush",description:"The useBrush hook makes the given element brushable. The passed ref is the element that listens for the mousedown event. The provided options can be used to configure the brush like its direction, extent and so on.",source:"@site/docs/hooks/useBrush.mdx",sourceDirName:"hooks",slug:"/hooks/useBrush",permalink:"/hyprvis/hooks/useBrush",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hooks",permalink:"/hyprvis/category/hooks"},next:{title:"useLasso",permalink:"/hyprvis/hooks/useLasso"}},g={},v=[{value:"Demo",id:"demo",level:2},{value:"Usage",id:"usage",level:2},{value:"API",id:"api",level:2}];function b(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"useBrush"})," hook makes the given element brushable. The passed ref is the element that listens for the mousedown event. The provided options can be used to configure the brush like its direction, extent and so on."]}),"\n",(0,r.jsx)(s.h2,{id:"demo",children:"Demo"}),"\n",(0,r.jsx)(x,{}),"\n",(0,r.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",children:"import { useBrush, BrushRect } from 'hyprvis';\n\nfunction BrushDemo() {\n    const ref = useRef();\n    const { brush, setBrush } = useBrush(ref);\n\n    return <svg ref={ref}>\n        {\n            brush ? <BrushRect parent={ref} direction=\"both\" onChange={setBrush} brush={brush} /> : null }\n    </svg>\n}\n"})}),"\n",(0,r.jsx)(s.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",children:"interface UseBrushProps {\n  value?: Brush;\n  onChange?: (brush: Brush) => void;\n  onChangeEnd?: (brush: Brush) => void;\n  onClick?: () => void;\n  defaultValue?: Brush;\n  direction?: Direction;\n  extent?: Extent;\n  persistMode?: PersistMode;\n}\n"})})]})}function j(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(b,{...e})}):b(e)}}}]);